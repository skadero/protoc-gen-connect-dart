// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pinger/ping.proto

package pingerconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	pinger "github.com/skadero/protoc-gen-connect-dart/example/go_server/rpc/pinger"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PingerName is the fully-qualified name of the Pinger service.
	PingerName = "pinger.Pinger"
)

// PingerClient is a client for the pinger.Pinger service.
type PingerClient interface {
	Ping(context.Context, *connect_go.Request[pinger.PingRequest]) (*connect_go.Response[pinger.PingResponse], error)
}

// NewPingerClient constructs a client for the pinger.Pinger service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPingerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PingerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pingerClient{
		ping: connect_go.NewClient[pinger.PingRequest, pinger.PingResponse](
			httpClient,
			baseURL+"/pinger.Pinger/Ping",
			opts...,
		),
	}
}

// pingerClient implements PingerClient.
type pingerClient struct {
	ping *connect_go.Client[pinger.PingRequest, pinger.PingResponse]
}

// Ping calls pinger.Pinger.Ping.
func (c *pingerClient) Ping(ctx context.Context, req *connect_go.Request[pinger.PingRequest]) (*connect_go.Response[pinger.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// PingerHandler is an implementation of the pinger.Pinger service.
type PingerHandler interface {
	Ping(context.Context, *connect_go.Request[pinger.PingRequest]) (*connect_go.Response[pinger.PingResponse], error)
}

// NewPingerHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPingerHandler(svc PingerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/pinger.Pinger/Ping", connect_go.NewUnaryHandler(
		"/pinger.Pinger/Ping",
		svc.Ping,
		opts...,
	))
	return "/pinger.Pinger/", mux
}

// UnimplementedPingerHandler returns CodeUnimplemented from all methods.
type UnimplementedPingerHandler struct{}

func (UnimplementedPingerHandler) Ping(context.Context, *connect_go.Request[pinger.PingRequest]) (*connect_go.Response[pinger.PingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pinger.Pinger.Ping is not implemented"))
}
