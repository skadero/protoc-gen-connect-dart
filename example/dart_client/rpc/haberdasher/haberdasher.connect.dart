//
// Code generated by protoc-gen-connect-dart. DO NOT EDIT.
// Generated from: haberdasher/haberdasher.proto
//
// @dart = 2.17
// ignore_for_file: annotate_overrides,camel_case_types,constant_identifier_names,deprecated_member_use_from_same_package,directives_ordering,library_prefixes,non_constant_identifier_names,prefer_final_fields,return_of_invalid_type,unnecessary_const,unnecessary_import,unnecessary_this,unused_import,unused_shown_name
import 'dart:async';
import 'package:ska_connect/ska_connect.dart';
import 'dart:convert';
import './haberdasher.pb.dart';
import '../pinger/ping.pb.dart';

abstract class Haberdasher {
	Future<ConnectResponse<Hat>>makeHat(Size size);
	Future<ConnectResponse<PingResponse>>ping(PingRequest pingRequest);
	Future<ConnectResponse<PingResponse>>invalidArg(PingRequest pingRequest);
}

class HaberdasherClient implements Haberdasher {
	final ConnectClient connectClient;

  HaberdasherClient(this.connectClient) {
	}

	@override
	Future<ConnectResponse<Hat>> makeHat(Size size) async {
    return connectClient.performRequest(
      '/haberdasher.Haberdasher/MakeHat', size, (b) => Hat.fromBuffer(b));
	}

	@override
	Future<ConnectResponse<PingResponse>> ping(PingRequest pingRequest) async {
    return connectClient.performRequest(
      '/haberdasher.Haberdasher/Ping', pingRequest, (b) => PingResponse.fromBuffer(b));
	}

	@override
	Future<ConnectResponse<PingResponse>> invalidArg(PingRequest pingRequest) async {
    return connectClient.performRequest(
      '/haberdasher.Haberdasher/InvalidArg', pingRequest, (b) => PingResponse.fromBuffer(b));
	}
}
